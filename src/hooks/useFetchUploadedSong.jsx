import { useContext, useCallback } from "react";
import { SongsContext } from "../context/SongsContext";
import { useImmer } from "use-immer";
import { fetchDataFromApi } from "../utils/api";
import songsData from "../data/songsData";

export default function useFetchUploadedSong(file) {
  let [num, setNum] = useImmer(songsData.length);
  const [msg, setMsg] = useImmer(null);
  const [progress, setProgress] = useImmer({ started: false, pc: 0 });
  const { setSongs, setFilteredSongs, setControlFilters } = useContext(SongsContext);

    /**\
     * * If the file chose(true) will happen API post request to custom fetchDataFromApi(asyncFunction)
     * * which will return data about the song - see the line(32)
     * * result will be pushed to the original state of the songs list - see the line(34)
     * * name and author too but it will be taken from passed file(files event) - see the line(38, 39)
     * * track number generated by incrementing single variable - see the line(33)
     * @param {Object} file - File data from input{file} 
     * @returns {Object} asyncFetchData, msg, progress - asyncFetchData it will be called(in MusicUploadForm component)
     * * for getting uploaded song after click(in function handleUpload) 
     * * msg and progress status(msg) about the process and progress for the progress bar
     */

    const asyncFetchData = useCallback(async () => {
      if (!file) {
      setMsg("No file selected !");
      return
      }
        try {
            setMsg("Uploading...");
            let response = await fetchDataFromApi(file, setProgress)
            setNum(++num);
            setSongs((draft) => {
            draft.push({
              trackNumber: num,
              src: response.data.files.song, // * song path 
              songName: file.name.substring(0, 15), // * song name
              artistName: file.name.substring(0, 10), // * song author
            });
          });
          setMsg("Upload successful");
        } catch (error) {
          setMsg("Upload failed");
        } finally {
          setFilteredSongs(false) // * Reset the filtered songs to initial state
          setControlFilters({select: '', search: ''}) // * Reset filters to initial state
        }
    }, [file])

    return { asyncFetchData, msg, progress};
  }